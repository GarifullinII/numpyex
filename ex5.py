import numpy as np

# изменение формы массивов, добавление и удаление осей
a = np.arange(10)
print(a)
a.shape = 2, 5
print(a)
b = a.reshape(10)
print(b)
# при этом массив a как был двумерным, так им и остался
# представления могут быть разными у одного и того же массива, но данные не изменяются

# -1 - размерность не указана, строк сколько возможно будет, при этом 5 - строгое количество столбцов
# -1 - неуказанное количество строк, также можно не указывать столбцы задав -1
a.shape = -1, 5

# многомерный массив преобразуем в одномерный массив (вектор)
# представление самого массива a не изменяется
a.ravel()

# операция с самим текущим массивом, меняет представление текущего массива
a.resize(2, 5)

# меняем форму и число элементов в массиве, добавляются 0 при увеличении количества
a.resize(3, 3, refcheck=False)
print(a)

# изменение строк на столбцы в матрице (транспонирование)
t = np.array([(1, 2, 3), (1, 4, 9), (1, 8, 27)])
g = t.T
print(t)
print(g)

u = np.arange(1, 10)
j = u.T
print(u)
print(j)

u.shape = 1, -1
print(u.T)

# .expand_dims(a, axis) - добавление новой оси, копирование данных не происходит, меняем представление добавляя новую ось
i = np.arange(32).reshape(8, 2, 2)
print(i.shape)
k = np.expand_dims(i, axis=0)
print(k.shape)
l = np.append(k, k, axis=0)
print(l.shape)
# удаление указанного элемента
o = np.delete(l, 0, axis=0)
print(o.shape)
p = np.expand_dims(l, axis=-1)
print(p)

# .squeeze(a[, axis]) - удаление оси (без удаления элементов)
qa = np.squeeze(p)
print(qa.shape)

# удаление строго определенной оси, удалять можно только те оси, где 1 элемент, где более будет ошибка
qw = np.squeeze(p, axis=0)
print(qw.shape)

# добавление новых осей с помощью newaxis
az = np.arange(1, 9)
print(az.shape)
ax = az[np.newaxis, :]
print(ax.shape)

# расположение как столбцов
# .[:, np.newaxis]
# .[np.newaxis, np.newaxis]

